-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module MonisApp.Enum.Transactions_update_column exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| update columns of table "transactions"

  - Account\_id - column name
  - Amount - column name
  - Category\_id - column name
  - Comment - column name
  - Created\_at - column name
  - Date - column name
  - Deleted - column name
  - Id - column name
  - Operation - column name
  - Payee - column name
  - Updated\_at - column name
  - User\_id - column name

-}
type Transactions_update_column
    = Account_id
    | Amount
    | Category_id
    | Comment
    | Created_at
    | Date
    | Deleted
    | Id
    | Operation
    | Payee
    | Updated_at
    | User_id


list : List Transactions_update_column
list =
    [ Account_id, Amount, Category_id, Comment, Created_at, Date, Deleted, Id, Operation, Payee, Updated_at, User_id ]


decoder : Decoder Transactions_update_column
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "account_id" ->
                        Decode.succeed Account_id

                    "amount" ->
                        Decode.succeed Amount

                    "category_id" ->
                        Decode.succeed Category_id

                    "comment" ->
                        Decode.succeed Comment

                    "created_at" ->
                        Decode.succeed Created_at

                    "date" ->
                        Decode.succeed Date

                    "deleted" ->
                        Decode.succeed Deleted

                    "id" ->
                        Decode.succeed Id

                    "operation" ->
                        Decode.succeed Operation

                    "payee" ->
                        Decode.succeed Payee

                    "updated_at" ->
                        Decode.succeed Updated_at

                    "user_id" ->
                        Decode.succeed User_id

                    _ ->
                        Decode.fail ("Invalid Transactions_update_column type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Transactions_update_column -> String
toString enum____ =
    case enum____ of
        Account_id ->
            "account_id"

        Amount ->
            "amount"

        Category_id ->
            "category_id"

        Comment ->
            "comment"

        Created_at ->
            "created_at"

        Date ->
            "date"

        Deleted ->
            "deleted"

        Id ->
            "id"

        Operation ->
            "operation"

        Payee ->
            "payee"

        Updated_at ->
            "updated_at"

        User_id ->
            "user_id"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Transactions_update_column
fromString enumString____ =
    case enumString____ of
        "account_id" ->
            Just Account_id

        "amount" ->
            Just Amount

        "category_id" ->
            Just Category_id

        "comment" ->
            Just Comment

        "created_at" ->
            Just Created_at

        "date" ->
            Just Date

        "deleted" ->
            Just Deleted

        "id" ->
            Just Id

        "operation" ->
            Just Operation

        "payee" ->
            Just Payee

        "updated_at" ->
            Just Updated_at

        "user_id" ->
            Just User_id

        _ ->
            Nothing
