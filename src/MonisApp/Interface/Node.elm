-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module MonisApp.Interface.Node exposing (..)

import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode
import MonisApp.InputObject
import MonisApp.Interface
import MonisApp.Object
import MonisApp.Scalar
import MonisApp.ScalarCodecs
import MonisApp.Union


type alias Fragments decodesTo =
    { onAccount : SelectionSet decodesTo MonisApp.Object.Account
    , onCategory : SelectionSet decodesTo MonisApp.Object.Category
    , onTransaction : SelectionSet decodesTo MonisApp.Object.Transaction
    , onUser : SelectionSet decodesTo MonisApp.Object.User
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo MonisApp.Interface.Node
fragments selections =
    Object.exhaustiveFragmentSelection
        [ Object.buildFragment "Account" selections.onAccount
        , Object.buildFragment "Category" selections.onCategory
        , Object.buildFragment "Transaction" selections.onTransaction
        , Object.buildFragment "User" selections.onUser
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onAccount = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onCategory = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onTransaction = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onUser = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


{-| The id of the object.
-}
id : SelectionSet MonisApp.ScalarCodecs.Id MonisApp.Interface.Node
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (MonisApp.ScalarCodecs.codecs |> MonisApp.Scalar.unwrapCodecs |> .codecId |> .decoder)
